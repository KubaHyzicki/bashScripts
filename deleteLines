#!/usr/bin/env bash

if [[ $1 == "--help" ]]
then
	echo "script deletes lines in file with given pattern
but! It also creates a copy of last changed file, logs from
changes(not only lastest) and allows them to use it to revert
to delete lines type:			deletelines \$pattern \$file
to revert changes from log file:	deletelines -r
to not overwrite log file type:		deletelines -l \$pattern \$file
to just display(show) logs file:	deletelines -s
to clear logs and backup file:		deletelines -c"
	exit 0								#did not want "-d" for display couse of "d" being like "delete"
fi

copy=~/Documents/deleteLines_copy
logs=~/Documents/deleteLines_log

if [[ ${1::1} == "-" ]]
then
	args=$1
	pattern=$2
	file=$3
else
	pattern=$1
	file=$2
fi
logParse='echo '`pwd`'/'$file' > '$logs

if [[ `echo $args | grep 's'` ]]
then
	cat $logs
	exit
fi


if [[ `echo $args | grep 'c'` ]]
then
	echo -n > $logs
	echo -n > $copy
	exit
fi


if [[ `echo $args | grep 'r'` ]]
then
	temp=~/Documents/deleteLines_temp
	rm -f $temp
	file='hmm'
	while read -r line
	do
		if [[ (${line::1} == '/') && !(-s $temp) ]] 	#case initial start-no requirement of patching yet
		then
			file=$line
			touch $temp
			continue
		fi
		if [[ ${line::1} == '/' ]]
		then
			patch -s $file $temp 	#(temp=patch)
			echo "patched $file"
			rm -f $temp
			touch $temp
			file=$line
			continue
		fi
		echo $line >> $temp
	done < $logs
	patch -s $file $temp 			#(temp=patch)
	echo "patched $file"
	rm -f $temp
	exit
fi


if [[ `echo $args | grep 'l'` ]]
then
	logParse=`echo $logParse | sed 's|>|>>|'`
fi


cp $file $copy

sed -i "/$pattern/d" ./$file

eval $logParse
diff $file $copy >> $logs
cat $logs
