#!/usr/bin/env bash

if [[ $1 == "--help" ]]
then
	echo "script to menage other scripts statuses-there are so many of them that I decided to creare for them sth like base so that
I would know what and where to do whether I actually do or do not want to at the moment, avalible statuses:
INPROGRESS,IDEA,FEATURE,NOTWORKING,UNKNOWN,WORKING,SUSPENDED
to display statuses:		scSt
to display one:			scst \$file
to display all:			scst -a
to not to display comments:	scSt -n
to change status type:		scSt \$file \$status
to edit comment:		scSt -c \$file
to match only exact word:	scst -w \$file..."
	exit
fi

~/scripts/rdmUpload &

#INPROGRESS;IDEA;FEATURE;NOTWORKING;UNKNOWN;WORKING;SUSPENDED }7 ones-display parametrized by this code
#1111100-standard(to do) 1111111-all
display() {		#display [-args] $code
	cd ~/scripts
	show() {	#show $status [$noComment]
		comment="echo \$x | sed 's/.*_//'"
		output=''
		if [[ !(-z $2) ]]
		then
			comment=""
		fi
		while read x
		do
			if [[ `echo $x | sed 's/.*=/=/' | sed 's/_.*//' | grep "=$1"` ]]
			then
				#line=$(eval "echo *\$x | sed 's/=.*_/  -/'$noComment | sed 's/-$//'")
				line1=$(eval "echo -\$x | sed 's/=.*//'")
				chars=`echo $line1 | wc -m`
				line2=''
				while [[ $chars -le 22 ]]		#align tabs
				do line2="$line2	"
					chars=$(($chars+7))
				done
				line3=$(eval "$comment")
				
				output="$output${line1}${line2}${line3}
"
			fi
		done < .status
		if [[ $output ]]
		then
			echo "		$1"
			echo "$output"
		fi
	}

	noComment=''
	if [[ ${1::1} == "-" ]]
	then
		code=$2
		if [[ `echo $1 | grep n` ]]
		then
			noComment="1"
		fi
	else
		code=$1
	fi
	if [[ ${code:6:1} == "1" ]]; then eval "show SUSPENDED $noComment";fi
	if [[ ${code:5:1} == "1" ]]; then eval "show WORKING $noComment";fi
	if [[ ${code:3:1} == "1" ]]; then eval "show NOTWORKING $noComment";fi
	if [[ ${code:2:1} == "1" ]]; then eval "show FEATURE $noComment";fi
	if [[ ${code:4:1} == "1" ]]; then eval "show UNKNOWN $noComment";fi
	if [[ ${code:1:1} == "1" ]]; then eval "show IDEA $noComment";fi
	if [[ ${code:0:1} == "1" ]]; then eval "show INPROGRESS $noComment";fi
}
#################################################################
#################################################################
#################################################################

mode="1111100"
#################################################################
if [[ (-z $1) || ((-z $2)&&(${1::1} == "-")) ]]
then
	if [[ `echo $1 | grep a` ]]
	then
		mode="1111111"
	fi
	
	noComment=''
	if [[ `echo $1 | grep n` ]]
	then
		noComment="-n"
	fi
	display $noComment $mode
	exit
fi


grepPattern='$pattern'
if [[ ${1::1} == "-" ]]
then
	pattern=$2
	status=$3
	if [[ `echo $1 | grep \w` ]]
	then
		grepPattern='^$pattern$'
	fi
else
	pattern=$1
	status=$2
fi

cd ~/scripts
results=`eval "git ls-files | grep -i $grepPattern | wc -l"`
if [[ $results == "0" ]]; then echo "no such scripts";exit;fi
if [[ $results -gt 1 ]]; then echo "more then one result";exit;fi
file=`eval "git ls-files | grep -i $grepPattern"`
line=`cat ~/scripts/.status | grep ^$file`
comment=`echo $line | sed 's/.*_//'`

#################################################################
if [[ (${1::1} == "-") && (`echo $1 | grep c`) ]]
then
	temp=~/Documents/scSt_$file
	touch $temp
	echo $comment > $temp
	vim -c 'startinsert' $temp
	comment=`cat $temp | sed 's/\n/;/g'`
	line=`echo $line | sed "s/_.*/_$comment/"`
	sed -i "s/$file.*/$line/" ~/scripts/.status
	rm $temp
	echo "changed comment of $file"
	exit
fi

#################################################################
if [[ -z $2 ]]
then
	echo $line | sed 's/_/	/'
	exit
fi

#################################################################
if [[ true ]]
then
	if [[ (-z $status) ||  !(($status == "INPROGRESS") || ($status == "IDEA") || ($status == "FEATURE") || ($status == "NOTWORKING") || ($status == "UNKNOWN") || ($status == "WORKING") || ($status == "SUSPENDED")) ]]
	then
		echo "wrong status"
		exit
	fi
	status="${status}"
	line=`cat  ~/scripts/.status | grep $file | sed "s|$file=.*_|${file}=${status}_|"`
	sed -i "s|$file=.*_|${file}=${status}_|" ~/scripts/.status
	echo "status of $file setted to $status"
fi
