#!/usr/bin/env bash
#_plsDontUploadMe
#_source

#hmmm pomysł wyszedł z wypadku użycia rm -rf na złym folderze, a dokładnie miał to być subfolder...nic się strasznego nie stało, ale na przyszłość można zrobić rm, który oprócz usunięcia robi backup ostatnio usuniętych rzeczy

#dla dużych rzeczy kopiowanie może być problematyczne więc zamiast kopiować można przenosić do np. ~/.rm_backup/
#a dokładniej:

if [[ $1 == "--help" ]]
then
	echo "Overwrites rm command with copying dirs/files to backup folder(cleans automaticly after exceeding amount of parametrised backup files"
	exit
fi

export backup=~/Documents/.rm_backup
max_backups=3

clean(){
	max=$1
	shift
	old_files=$@
	cd $backup
	count=0
	if [[ $# -le $max ]]
	then
		echo "no need of cleanup"
		return
	fi
	for x in $old_files
	do
		if [[ $count -ge $max ]]
		then
			echo "rm $x"
			#rm -rf $x
		else
			echo "not $x"
			count=$(($count+1))
		fi
	done
	cd - &> /dev/null
}

remove(){
	#args=$2		#nie jestem pewny czy to w ogóle potrzebuje arugmentów, bo i tak chyba będzie zachowywać się tak samo,
	mv -fu $1 $backup/$1	#niezależnie czy jest to forsowane rekursywne czy zwykłe
}

if [[ ! -d "$backup" ]]
then
	mkdir $backup
fi

args=''
if [[ ${1::1} == "-" ]]
then
	args=${1:1}
	shift
	echo "I actually do not think it needs any args..."	#add up(comment next to remove func)
fi
old_files=''
for x in `ls -t $backup`
do
	old_files="$old_files $x"
done
#echo $old_files
for x in $@
do
	#checks if pattern matches file
	if [[ (`ls | grep -wi $x`) || (false) ]]	#w tym false myślałem czy by nie dodać argumentu, który by forsował normalne wywoływanie
	then
		remove $x $args
		continue
	else
		for x in `ls | grep -E $x`
		do
			remove $x $args
		done
	fi
done

clean $max_backups $old_files
#clean mógłby się wywoływać po komendzie(z zapamiętaną ilością starych obiektów do usunięcia) w oddzielonym przez & procesie dla szybszego wykonywania polecenia
#dodać obsługę "*" i ogólnie wyrażeń regularnych do wykrywania plików do usunięcia...możliwe że da się tu wykorzystać lsd

